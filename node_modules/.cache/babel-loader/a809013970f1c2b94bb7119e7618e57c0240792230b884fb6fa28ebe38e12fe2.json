{"ast":null,"code":"var _jsxFileName = \"/home/boris/Documents/backup-25.10.2022/b/react/quotes-router-app/src/pages/AllQuotes.js\",\n  _s = $RefreshSig$();\nimport QuoteList from \"../components/quotes/QuoteList\";\nimport useHttp from \"../hooks/use-http\";\nimport { getAllQuotes } from \"../lib/api\";\nimport { useEffect } from \"react\";\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\nimport NoQuotesFound from \"../components/quotes/NoQuotesFound\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DUMMY_QUOTES = [{\n  id: 'q1',\n  author: 'Nelson Mandela',\n  text: 'The greatest glory in living lies not in never falling, but in rising every time we fall.'\n}, {\n  id: 'q2',\n  author: 'Steve Jobs',\n  text: 'Your time is limited, so don\\'t waste it living someone else\\'s life. Don\\'t be trapped by dogma – which is living with the results of other people\\'s thinking.'\n}, {\n  id: 'q3',\n  author: 'John Lennon',\n  text: 'Life is what happens when you\\'re busy making other plans.'\n}];\nconst AllQuotes = () => {\n  _s();\n  const {\n    sendRequest,\n    status,\n    data: loadedQuotes,\n    error\n  } = useHttp(getAllQuotes, true);\n  useEffect(() => {\n    sendRequest();\n  }, [sendRequest]);\n  if (status === 'pending') {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"centered\",\n      children: /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 16\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"centered focused\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 16\n    }, this);\n  }\n  if (status === 'completed' && (!loadedQuotes || loadedQuotes === 0)) {\n    return /*#__PURE__*/_jsxDEV(NoQuotesFound, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(QuoteList, {\n    quotes: DUMMY_QUOTES\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 12\n  }, this);\n};\n_s(AllQuotes, \"Sn2QGCbJGjm/GjrACrT5qb4lH3A=\", false, function () {\n  return [useHttp];\n});\n_c = AllQuotes;\nexport default AllQuotes;\nvar _c;\n$RefreshReg$(_c, \"AllQuotes\");","map":{"version":3,"names":["QuoteList","useHttp","getAllQuotes","useEffect","LoadingSpinner","NoQuotesFound","DUMMY_QUOTES","id","author","text","AllQuotes","sendRequest","status","data","loadedQuotes","error"],"sources":["/home/boris/Documents/backup-25.10.2022/b/react/quotes-router-app/src/pages/AllQuotes.js"],"sourcesContent":["import QuoteList from \"../components/quotes/QuoteList\";\nimport useHttp from \"../hooks/use-http\";\nimport {getAllQuotes} from \"../lib/api\";\nimport {useEffect} from \"react\";\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\nimport NoQuotesFound from \"../components/quotes/NoQuotesFound\";\n\nconst DUMMY_QUOTES = [\n    {\n        id: 'q1',\n        author: 'Nelson Mandela',\n        text: 'The greatest glory in living lies not in never falling, but in rising every time we fall.'\n    },\n    {\n        id: 'q2',\n        author: 'Steve Jobs',\n        text: 'Your time is limited, so don\\'t waste it living someone else\\'s life. Don\\'t be trapped by dogma – which is living with the results of other people\\'s thinking.'\n    },\n    {\n        id: 'q3',\n        author: 'John Lennon',\n        text: 'Life is what happens when you\\'re busy making other plans.'\n    },\n]\n\nconst AllQuotes = () => {\n    const {sendRequest, status, data: loadedQuotes, error} = useHttp(getAllQuotes, true);\n\n    useEffect(() => {\n        sendRequest();\n    }, [sendRequest]);\n\n    if (status === 'pending') {\n        return <div className='centered'>\n            <LoadingSpinner></LoadingSpinner>\n        </div>\n    }\n\n    if (error) {\n        return <p className='centered focused'>{error}</p>\n    }\n\n    if (status==='completed' && (!loadedQuotes || loadedQuotes===0)){\n        return <NoQuotesFound/>;\n    }\n\n    return <QuoteList quotes={DUMMY_QUOTES}/>\n}\n\nexport default AllQuotes;\n"],"mappings":";;AAAA,OAAOA,SAAS,MAAM,gCAAgC;AACtD,OAAOC,OAAO,MAAM,mBAAmB;AACvC,SAAQC,YAAY,QAAO,YAAY;AACvC,SAAQC,SAAS,QAAO,OAAO;AAC/B,OAAOC,cAAc,MAAM,iCAAiC;AAC5D,OAAOC,aAAa,MAAM,oCAAoC;AAAC;AAE/D,MAAMC,YAAY,GAAG,CACjB;EACIC,EAAE,EAAE,IAAI;EACRC,MAAM,EAAE,gBAAgB;EACxBC,IAAI,EAAE;AACV,CAAC,EACD;EACIF,EAAE,EAAE,IAAI;EACRC,MAAM,EAAE,YAAY;EACpBC,IAAI,EAAE;AACV,CAAC,EACD;EACIF,EAAE,EAAE,IAAI;EACRC,MAAM,EAAE,aAAa;EACrBC,IAAI,EAAE;AACV,CAAC,CACJ;AAED,MAAMC,SAAS,GAAG,MAAM;EAAA;EACpB,MAAM;IAACC,WAAW;IAAEC,MAAM;IAAEC,IAAI,EAAEC,YAAY;IAAEC;EAAK,CAAC,GAAGd,OAAO,CAACC,YAAY,EAAE,IAAI,CAAC;EAEpFC,SAAS,CAAC,MAAM;IACZQ,WAAW,EAAE;EACjB,CAAC,EAAE,CAACA,WAAW,CAAC,CAAC;EAEjB,IAAIC,MAAM,KAAK,SAAS,EAAE;IACtB,oBAAO;MAAK,SAAS,EAAC,UAAU;MAAA,uBAC5B,QAAC,cAAc;QAAA;QAAA;QAAA;MAAA;IAAkB;MAAA;MAAA;MAAA;IAAA,QAC/B;EACV;EAEA,IAAIG,KAAK,EAAE;IACP,oBAAO;MAAG,SAAS,EAAC,kBAAkB;MAAA,UAAEA;IAAK;MAAA;MAAA;MAAA;IAAA,QAAK;EACtD;EAEA,IAAIH,MAAM,KAAG,WAAW,KAAK,CAACE,YAAY,IAAIA,YAAY,KAAG,CAAC,CAAC,EAAC;IAC5D,oBAAO,QAAC,aAAa;MAAA;MAAA;MAAA;IAAA,QAAE;EAC3B;EAEA,oBAAO,QAAC,SAAS;IAAC,MAAM,EAAER;EAAa;IAAA;IAAA;IAAA;EAAA,QAAE;AAC7C,CAAC;AAAA,GAtBKI,SAAS;EAAA,QAC8CT,OAAO;AAAA;AAAA,KAD9DS,SAAS;AAwBf,eAAeA,SAAS;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}